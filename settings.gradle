include ':Loglib'
include ':app'
rootProject.name = "hi_jetpack"
include ':nav-compiler'
include ':nav-annotation'
include ':router-gradle-plugin'


println "我是setting.gradle,我的工程路径${rootProject.projectDir}"

long beginOfSetting = System.currentTimeMillis()
def beginOfConfig
def configHasBegin = false
def beginOfProjectConfig = new HashMap()
def beginOfProjectExcute



gradle.projectsLoaded {project ->
    println "projectsLoaded: 初始化${project}阶段，耗时：" + (System.currentTimeMillis() -
            beginOfSetting) + 'ms'
}

gradle.beforeProject { project ->
    if (!configHasBegin) {
        configHasBegin = true
        beginOfConfig = System.currentTimeMillis()
    }
    println "------------->beforeProject: ${project} "
    beginOfProjectConfig.put(project, System.currentTimeMillis())
}
gradle.afterProject { project ->
    def begin = beginOfProjectConfig.get(project)
    println "${project}配置阶段，" + project + '耗时：' +
            (System.currentTimeMillis() - begin) + 'ms'
}
gradle.taskGraph.whenReady {
    println '配置阶段，总共耗时：' + (System.currentTimeMillis() -
            beginOfConfig) + 'ms'
    beginOfProjectExcute = System.currentTimeMillis()
}
gradle.taskGraph.beforeTask { task ->
    task.doFirst {
        task.ext.beginOfTask = System.currentTimeMillis()
    }
    task.doLast {
        println "执行阶段，${task} 耗时：" +
                (System.currentTimeMillis() - task.beginOfTask) + 'ms'
    }
}
gradle.buildFinished {
    println '执行阶段，耗时：' + (System.currentTimeMillis() -
           beginOfProjectExcute) + 'ms'
}


//构建生命周期监听
gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {
        println "BuildListener+buildStarted"
    }

    @Override
    void settingsEvaluated(Settings settings) {
        println "[life-cycle]初始化阶段完成"
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        println "BuildListener+projectsLoaded"
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println "[life-cycle]配置阶段完成"

        gradle.rootProject.childProjects.each {
            name,project ->
                println("[子工程]-${name}-路径是：${project.getProjectDir()}")
        }
    }

    @Override
    void buildFinished(BuildResult result) {
        println "[life-cycle]构建结束"
    }
})

